pipeline {
    agent any

    environment {
        // ===================== Âü∫Á°ÄÁâàÊú¨‰ø°ÊÅØ =====================
        BUILD_NAME             = "${env.BUILD_NAME ?: '1.0.0'}"
        IOS_BUILD_NUMBER       = "${env.IOS_BUILD_NUMBER ?: '1'}"
        ANDROID_BUILD_NUMBER   = "${env.ANDROID_BUILD_NUMBER ?: '1'}"

        // ===================== Ë∑ØÂæÑ‰∏éÈÖçÁΩÆ =====================
        EXPORT_PATH            = "../pack_store"
        EXPORT_OPTIONS_PLIST_PATH = "${EXPORT_PATH}/export_options_appStore.plist"
        DART_DEFINE_FILE       = "${EXPORT_PATH}/prod.env"
        OUTPUT_DIR             = "/Users/agi00107/Desktop/outpackage/market_release"
        ARCHIVE_OUTPUT_PATH    = "${OUTPUT_DIR}/${BUILD_NAME}/ios"
        APK_OUTPUT_PATH        = "${OUTPUT_DIR}/${BUILD_NAME}/apk"

        // ===================== Git ‰ªìÂ∫ì =====================
        GIT_REPO               = 'git@codeup.aliyun.com:6710bdc09d3c82efe37b13cc/facesong/facesong_flutter.git'
        GIT_CREDENTIAL_ID      = 'git-ssh-key'
        GIT_REF                = "${env.GIT_REF ?: 'main'}"

        // ===================== APK Âä†Âõ∫ÈÖçÁΩÆ =====================
        PROTECT_APK            = "${env.PROTECT_APK ?: 'true'}"
        SECAPI_JAR_PATH        = "${EXPORT_PATH}/secapi-4.1.5-SNAPSHOT.jar"
        CHANNEL_FILE           = "${EXPORT_PATH}/channelexname.txt" 

        // ===================== ÈíâÈíâÂëäË≠¶ =====================
        DINGTALK_WEBHOOK       = "https://oapi.dingtalk.com/robot/send?access_token=ae7a01ed25859f3e9f995717eacbb5bd67dde43cbcb889c27a5868aad347016a"
        // DINGTALK_WEBHOOK       = "https://oapi.dingtalk.com/robot/send?access_token=057c702cdb1896282659cd07439846fd07ec052cf599883260c08f289f2cd89f"
    }

    stages {
        stage('ÂàùÂßãÂåñ‰ªìÂ∫ì') {
            steps {
                dir('facesong_flutter') {
                    echo "üöÄ [1/7] ÂàùÂßãÂåñ Git ‰ªìÂ∫ì..."
                    script {
                        def gitDirExists = fileExists('.git')
                        if (!gitDirExists) {
                            deleteDir()
                            sh "git clone ${env.GIT_REPO} . && git checkout ${env.GIT_REF}"
                        } else {
                            sh "git reset --hard && git clean -fd"
                        }

                        checkout([$class: 'GitSCM',
                            branches: [[name: "${env.GIT_REF}"]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [[$class: 'CleanBeforeCheckout']],
                            userRemoteConfigs: [[
                                url: env.GIT_REPO,
                                credentialsId: env.GIT_CREDENTIAL_ID
                            ]]
                        ])
                        sh "git log -5 --pretty=format:'%h %an %ad %s' --date=short"
                    }
                }
            }
        }

        stage('Á°ÆËÆ§ÁâàÊú¨Âè∑') {
            steps {
                echo "üî¢ [2/7] ÁâàÊú¨Âè∑Á°ÆËÆ§ÔºöBUILD_NAME=${BUILD_NAME}, IOS_BUILD_NUMBER=${IOS_BUILD_NUMBER}, ANDROID_BUILD_NUMBER=${ANDROID_BUILD_NUMBER}"
            }
        }

        stage('Flutter ÂàùÂßãÂåñ') {
            steps {
                dir('facesong_flutter') {
                    sh """
                        set -e
                        rm -f pubspec.lock ios/Podfile.lock
                        fvm flutter clean
                        export PUB_HOSTED_URL=https://pub.flutter-io.cn
                        fvm flutter pub get
                    """
                }
            }
        }

        stage('ÊûÑÂª∫ iOS IPA') {
            when { expression { return env.BUILD_IOS == "true" } }
            steps {
                dir('facesong_flutter') {
                    script {
                        def iosBuildResult = sh(
                            script: """
                                set -e
                                sh build.sh ipa \
                                    --channel AppStore \
                                    --flavor production \
                                    --export-options-plist=${EXPORT_OPTIONS_PLIST_PATH} \
                                    --dart-define-from-file=\${DART_DEFINE_FILE} \
                                    --dart-define=WATERMARK=false \
                                    --dart-define=DEV_CONFIG=false \
                                    --build-name ${BUILD_NAME} \
                                    --build-number ${IOS_BUILD_NUMBER}
                            """,
                            returnStatus: true
                        )

                        if (iosBuildResult == 0) {
                            sendDingTalkMessage(
                                "iOS ÊâìÂåÖÂÆåÊàê",
                                "### ‚úÖ iOS ÊâìÂåÖÂÆåÊàê\n- ÁâàÊú¨: ${BUILD_NAME} (${IOS_BUILD_NUMBER})\n- ‰∫ßÁâ©Ë∑ØÂæÑ: [smb://10.200.35.17](smb://10.200.35.17)"
                            )
                        } else {
                            sendDingTalkMessage(
                                "iOS ÊâìÂåÖÂ§±Ë¥•",
                                "### ‚ùå iOS ÊâìÂåÖÂ§±Ë¥•\n- ÁâàÊú¨: ${BUILD_NAME} (${IOS_BUILD_NUMBER})"
                            )
                            error("iOS ÊûÑÂª∫Â§±Ë¥•")
                        }
                    }
                }
            }
        }

        stage('Â§çÂà∂ xcarchive') {
            when { expression { return env.BUILD_IOS == "true" } }
            steps {
                dir('facesong_flutter') {
                    script {
                        def sourceDir = "build/ios/archive/Runner.xcarchive"
                        def targetDir = "${ARCHIVE_OUTPUT_PATH}/Runner.xcarchive"
                        sh """
                            set -e
                            mkdir -p "${ARCHIVE_OUTPUT_PATH}"
                            if [ -d "${sourceDir}" ]; then
                                rm -rf "${targetDir}"
                                cp -R "${sourceDir}" "${targetDir}"
                            else
                                exit 1
                            fi
                        """
                    }
                }
            }
        }

        stage('ÊûÑÂª∫ & Âä†Âõ∫ Android APK') {
            when { expression { return env.BUILD_ANDROID == "true" } }
            steps {
                dir('facesong_flutter') {
                    script {
                        sh "mkdir -p ${APK_OUTPUT_PATH}"

                        sh """
                            set -e
                            cp "${EXPORT_PATH}/key.properties" android/app/key.properties
                            cp "${EXPORT_PATH}/release.keystore" android/app/release.keystore
                        """

                        echo "üü¢ ÂºÄÂßãÊûÑÂª∫ APK"

                        def buildResult = sh(
                            script: """
                                set -e
                                if sed --version >/dev/null 2>&1; then
                                  sed -i 's/minSdk = flutter\\.minSdkVersion/minSdk = 24/' android/app/build.gradle
                                else
                                  sed -i '' 's/minSdk = flutter\\.minSdkVersion/minSdk = 24/' android/app/build.gradle
                                fi

                                fvm flutter build apk \
                                    --flavor production \
                                    --release \
                                    --dart-define-from-file="\${DART_DEFINE_FILE}" \
                                    --dart-define=WATERMARK=false \
                                    --dart-define=DEV_CONFIG=false \
                                    --build-name="${BUILD_NAME}" \
                                    --build-number="${ANDROID_BUILD_NUMBER}"
                            """,
                            returnStatus: true
                        )

                        if (buildResult != 0) {
                            sendDingTalkMessage(
                                "Android ÊûÑÂª∫Â§±Ë¥•",
                                "### ‚ùå Android ÊûÑÂª∫Â§±Ë¥•\n- ÁâàÊú¨: ${BUILD_NAME} (${ANDROID_BUILD_NUMBER})"
                            )
                            error("‚ùå APK ÊûÑÂª∫Â§±Ë¥•")
                        }

                        def builtApk = "build/app/outputs/flutter-apk/app-production-release.apk"
                        if (!fileExists(builtApk)) {
                            error("‚ùå Êú™ÊâæÂà∞ APK Êñá‰ª∂: ${builtApk}")
                        }
                        sh "echo 'Ê∏†ÈÅìÊñá‰ª∂ÂÜÖÂÆπ (Shell):' && cat ${CHANNEL_FILE}"
                        if (env.PROTECT_APK == "true") {
                            echo "üîí ÂºÄÂßãÂä†Âõ∫ APK"
                            def protectResult = sh(
                                script: """
                                    set -e
                                    java -jar "${SECAPI_JAR_PATH}" \
                                        -i 10.200.18.111:8000 \
                                        -u zyljsh \
                                        -a 3e41fc10-8c1b-44c2-9c1c-d3a99b1330ca \
                                        -c ba2749da-6086-41cd-b801-ee75727c4bdd \
                                        -f 0 -t 100000 \
                                        -p "${builtApk}" -d "${APK_OUTPUT_PATH}" \
                                        --action ud --ks 1 -l "${CHANNEL_FILE}"
                                """,
                                returnStatus: true
                            )

                            if (protectResult != 0) {
                                sendDingTalkMessage(
                                    "Android Âä†Âõ∫Â§±Ë¥•",
                                    "### ‚ùå Android APK Âä†Âõ∫Â§±Ë¥•\n- ÁâàÊú¨: ${BUILD_NAME} (${ANDROID_BUILD_NUMBER})"
                                )
                                error("‚ùå APK Âä†Âõ∫Â§±Ë¥•")
                            }
                            echo "‚úÖ APK Âä†Âõ∫ÊàêÂäü"
                        } else {
                            echo "‚öôÔ∏è Êú™ÂºÄÂêØÂä†Âõ∫ÔºåÁõ¥Êé•Â§çÂà∂ÊûÑÂª∫‰∫ßÁâ©"
                            sh "cp -v ${builtApk} ${APK_OUTPUT_PATH}/app-production-release.apk"
                        }

                        // ---------- 4Ô∏è‚É£ ÂéãÁº©Âπ∂Ëß£Âéã ----------
                        echo "üì¶ ÊâìÂåÖ APK ËæìÂá∫ÁõÆÂΩï‰∏∫ zip Âπ∂Ëß£Âéã..."
                        sh """
                            cd ${APK_OUTPUT_PATH}
                            zip -r app_package.zip .  # ÂéãÁº©ÂΩìÂâç APK ËæìÂá∫ÁõÆÂΩïÊâÄÊúâÊñá‰ª∂
                            rm -rf sign_apk           # Âà†Èô§ÊóßÁöÑ sign_apk Êñá‰ª∂Â§πÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
                            unzip -q app_package.zip -d sign_apk
                        """
                        echo "‚úÖ zip Ëß£ÂéãÂÆåÊàêÔºå‰∫ßÁâ©Êñá‰ª∂Â§πÂëΩÂêç‰∏∫ sign_apk"

                        // ---------- 5Ô∏è‚É£ ÊåâÊ∏†ÈÅìÊãÜÂàÜÂπ∂ÈáçÂëΩÂêç ----------
                        echo "üìÇ Ê†πÊçÆ APK ÂêçÁß∞ÊãÜÂàÜÊ∏†ÈÅìÊñá‰ª∂Â§πÂπ∂ÈáçÂëΩÂêç..."
                        sh """
                            cd ${APK_OUTPUT_PATH}/sign_apk
                            for apk in *.apk; do
                                channel=\$(echo \$apk | sed -n 's/.*_sec_\\(.*\\)_sign\\.apk/\\1/p')
                                if [ -n "\$channel" ]; then
                                    mkdir -p "\$channel"
                                    mv "\$apk" "\$channel/yinchao-v${BUILD_NAME}-${ANDROID_BUILD_NUMBER}-\$channel.apk"
                                fi
                            done
                        """
                        echo "‚úÖ APK Â∑≤ÊåâÊ∏†ÈÅìÊãÜÂàÜÂπ∂ÈáçÂëΩÂêçÂÆåÊàê"

                        sendDingTalkMessage(
                            "Android ÊâìÂåÖÂÆåÊàê",
                            "### ‚úÖ Android ÊâìÂåÖÂÆåÊàê\n- ÁâàÊú¨: ${BUILD_NAME} (${ANDROID_BUILD_NUMBER})\n- ‰∫ßÁâ©Ë∑ØÂæÑ: [smb://10.200.35.17](smb://10.200.35.17)"
                        )
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                sendDingTalkMessage(
                    "ÊâìÂåÖÂ§±Ë¥•",
                    "‚ùå ÊûÑÂª∫Â§±Ë¥• ‚ö†Ô∏è\nÁâàÊú¨: ${BUILD_NAME} (iOS: ${IOS_BUILD_NUMBER}, Android: ${ANDROID_BUILD_NUMBER})"
                )
            }
        }
    }
}

// ---------------- Ëá™ÂÆö‰πâÂáΩÊï∞ ----------------
def sendDingTalkMessage(String title, String content) {
    sh """
        curl -s '${DINGTALK_WEBHOOK}' \
        -H 'Content-Type: application/json' \
        -d '{
            "msgtype": "markdown",
            "markdown": {
                "title": "${title}",
                "text": "${content}"
            }
        }'
    """
}
